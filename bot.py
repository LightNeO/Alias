import telebot
from telebot import types
import random
import threading
import time

TOKEN = "YOUR_TOKEN"
bot = telebot.TeleBot(TOKEN, parse_mode=None)

games = {}

with open("simple_words.txt", "r", encoding="utf-8") as f:
    simple_words = [line.strip().upper() for line in f if line.strip()]

with open("hard_words.txt", "r", encoding="utf-8") as f:
    hard_words = [line.strip().upper() for line in f if line.strip()]


def create_game(chat_id):
    games[chat_id] = {
        "teams": {},
        "team_order": [],
        "current_team_index": 0,
        "current_team": None,
        "current_word": None,
        "round_time": 111,
        "round_number": 0,
        "words_pool": [],
        "round_active": False,
        "time_left": 0,
        "timer_thread": None,
        "last_word_pending": False,
        "score_to_win": 5,
        "chat_id": chat_id
    }


def main_menu():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton("‚úÖ –ü–æ—á–∞—Ç–∏ –Ω–æ–≤—É –≥—Ä—É")
    btn2 = types.KeyboardButton("‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞")
    markup.add(btn1, btn2)
    return markup


def start_button():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ—á–∞—Ç–∏ –≥—Ä—É", callback_data="start_game"))
    return markup


def word_buttons():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –í–≥–∞–¥–∞–Ω–æ", callback_data="guessed"))
    markup.add(types.InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip"))
    return markup


def difficulty_buttons():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü—Ä–æ—Å—Ç—ñ —Å–ª–æ–≤–∞", callback_data="simple"))
    markup.add(types.InlineKeyboardButton("–°–∫–ª–∞–¥–Ω—ñ —Å–ª–æ–≤–∞", callback_data="hard"))
    return markup


def next_round_button():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚û° –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä–∞—É–Ω–¥", callback_data="next_round"))
    return markup


@bot.message_handler(func=lambda message: message.text == "‚úÖ –ü–æ—á–∞—Ç–∏ –Ω–æ–≤—É –≥—Ä—É")
def handle_start_game_message(message):
    start_game(message.chat.id)


@bot.callback_query_handler(func=lambda call: call.data == "start_game")
def handle_start_game_callback(call):
    start_game(call.message.chat.id)


@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞")
def send_rules(message):
    rules = (
        "üìú –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏ üìú\n\n"
        "1. –ì—Ä–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ –Ω–∞ 2 –∫–æ–º–∞–Ω–¥–∏.\n"
        "2. –ö–æ–∂–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ —á–µ—Ä–∑—ñ –æ—Ç—Ä–∏–º—É—î —Å–ª–æ–≤–∞ –¥–ª—è –≤—ñ–¥–≥–∞–¥—É–≤–∞–Ω–Ω—è.\n"
        "3. –°–ø—ñ–ª—å–Ω–æ–∫–æ—Ä–µ–Ω–µ–≤—ñ —Å–ª–æ–≤–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.\n"
        "4. –ó–∞ –∫–æ–∂–Ω–µ –≤–≥–∞–¥–∞–Ω–µ —Å–ª–æ–≤–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç—Ä–∏–º—É—î 1 –±–∞–ª.\n"
        "5. –ó–∞ –∫–æ–∂–Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω–µ —Å–ª–æ–≤–æ –∫–æ–º–∞–Ω–¥–∞ –≤—Ç—Ä–∞—á–∞—î 1 –±–∞–ª.\n"
        "6. –†–∞—É–Ω–¥ —Ç—Ä–∏–≤–∞—î 111 —Å–µ–∫—É–Ω–¥.\n"
        "7. –ü–µ—Ä–µ–º–∞–≥–∞—î –∫–æ–º–∞–Ω–¥–∞, —è–∫–∞ –ø–µ—Ä—à–æ—é –Ω–∞–±–µ—Ä–µ 5 –±–∞–ª—ñ–≤.\n\n"
        "üçÄ –£–¥–∞—á—ñ! üçÄ"
    )
    bot.send_message(message.chat.id, rules)


@bot.message_handler(commands=["start"])
def start(message):
    chat_id = message.chat.id
    create_game(chat_id)
    bot.send_message(chat_id, "üéÆ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üéÆ", reply_markup=main_menu())


# —Å—Ç–∞—Ä—Ç –≥—Ä–∏
def start_game(chat_id):
    create_game(chat_id)
    bot.send_message(chat_id, "–ì—Ä–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è! –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–µ—Ä—à–æ—ó –∫–æ–º–∞–Ω–¥–∏:")
    bot.register_next_step_handler_by_chat_id(chat_id, get_team_name, team_number=1)


def get_team_name(message, team_number):
    chat_id = message.chat.id
    game = games[chat_id]
    name = message.text.strip()
    game["teams"][name] = {"score": 0}
    game["team_order"].append(name)

    if team_number == 1:
        bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥—Ä—É–≥–æ—ó –∫–æ–º–∞–Ω–¥–∏:")
        bot.register_next_step_handler_by_chat_id(chat_id, get_team_name, team_number=2)
    else:
        bot.send_message(
            chat_id,
            "–û–±–∏–¥–≤—ñ –∫–æ–º–∞–Ω–¥–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –í–∏–±–µ—Ä—ñ—Ç—å —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —Å–ª—ñ–≤:",
            reply_markup=difficulty_buttons(),
        )


@bot.callback_query_handler(func=lambda call: call.data in ["simple", "hard"])
def choose_difficulty(call):
    chat_id = call.message.chat.id
    game = games[chat_id]

    if call.data == "simple":
        game["words_pool"] = simple_words.copy()
    else:
        game["words_pool"] = hard_words.copy()

    bot.send_message(chat_id, f"–í–∏ –æ–±—Ä–∞–ª–∏: {call.data}. –ü–æ—á–∏–Ω–∞—î–º–æ –≥—Ä—É!")
    start_team_round(chat_id)


def start_team_round(chat_id):
    game = games[chat_id]

    if game["round_number"] == 0:
        game["round_number"] = 1

    game["current_team"] = game["team_order"][game["current_team_index"]]
    game["round_active"] = True
    game["time_left"] = game["round_time"]
    game["last_word_pending"] = False

    send_new_word(chat_id)

    game["timer_thread"] = threading.Thread(target=round_timer, args=(chat_id,))
    game["timer_thread"].start()


def round_timer(chat_id):
    game = games[chat_id]

    while game["time_left"] > 0 and game["round_active"]:
        time.sleep(1)
        game["time_left"] -= 1

    if game["round_active"]:
        game["round_active"] = False
        game["last_word_pending"] = True
        bot.send_message(chat_id, "‚è∞ –ß–∞—Å –≤–∏–π—à–æ–≤! –ú–æ–∂–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
        bot.send_message(
            chat_id,
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ—á–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä–∞—É–Ω–¥.",
            reply_markup=next_round_button(),
        )


def send_new_word(chat_id):
    game = games[chat_id]

    if not game["words_pool"]:
        bot.send_message(chat_id, "–°–ª–æ–≤–∞ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è! –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        game["round_active"] = False
        bot.send_message(
            chat_id,
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ—á–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä–∞—É–Ω–¥.",
            reply_markup=next_round_button(),
        )
        return

    word = random.choice(game["words_pool"])
    game["current_word"] = word.upper()
    game["words_pool"].remove(word)

    bot.send_message(
        chat_id,
        f"‚û°Ô∏è –†–∞—É–Ω–¥ <b>{game['round_number']}</b>\n"
        f"üë• –ö–æ–º–∞–Ω–¥–∞: <b>{game['current_team']}</b>\n\n"
        f"‚è±Ô∏è {game['time_left']} —Å–µ–∫—É–Ω–¥ ‚è±Ô∏è\n\n"
        f"üî§ <b>{game['current_word']}</b> üî§",
        parse_mode="HTML",
        reply_markup=word_buttons(),
    )


@bot.callback_query_handler(func=lambda call: call.data in ["guessed", "skip"])
def handle_guess(call):
    chat_id = call.message.chat.id
    game = games[chat_id]

    if not game["round_active"] and not game["last_word_pending"]:
        bot.answer_callback_query(call.id, "–†–∞—É–Ω–¥ —â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π –∞–±–æ —á–∞—Å –≤–∏–π—à–æ–≤.")
        return

    team = game["teams"][game["current_team"]]

    if call.data == "guessed":
        team["score"] += 1
    elif call.data == "skip":
        team["score"] -= 1

    bot.send_message(chat_id, f"–†–∞—Ö—É–Ω–æ–∫ {game['current_team']}: {team['score']}")

    if team["score"] >= game["score_to_win"]:
        bot.send_message(chat_id, f"üèÜ –ö–æ–º–∞–Ω–¥–∞ '{game['current_team']}' –ø–µ—Ä–µ–º–æ–≥–ª–∞!")
        game["round_active"] = False
        bot.send_message(chat_id, "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É –≥—Ä—É.", reply_markup=start_button())
        return

    if game["round_active"]:
        send_new_word(chat_id)
    else:
        game["last_word_pending"] = False


@bot.callback_query_handler(func=lambda call: call.data == "next_round")
def next_round(call):
    chat_id = call.message.chat.id
    game = games[chat_id]

    game["current_team_index"] = (game["current_team_index"] + 1) % len(game["team_order"])
    if game["current_team_index"] == 0:
        game["round_number"] += 1

    start_team_round(chat_id)


bot.infinity_polling()
